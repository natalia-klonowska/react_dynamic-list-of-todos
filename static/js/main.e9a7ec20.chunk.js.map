{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedId","selectTodoId","selectTodo","className","map","todo","id","title","completed","isSelected","type","onClick","TodoFilter","filterTodos","useState","selectedFilter","setSelectedFilter","query","setQuery","filteredTodos","filter","newQuery","lowerQuery","toLowerCase","includes","Error","value","onChange","event","String","target","placeholder","handleFilter","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","Loader","TodoModal","selectedUser","selectedTodo","reset","isSelectedLoading","href","email","name","App","setTodos","setFilteredTodos","setSelectedId","setSelectedUser","setSelectedTodo","isLoading","setIsLoading","setIsSelectedLoading","useEffect","finally","selectUser","userId","getUser","newTodos","todoId","undefined","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e9a7ec20.chunk.js","sourcesContent":["import React from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface TodoListProps {\n  todos: Todo[]\n  selectedId: number,\n  selectTodoId: (todoId: number) => void,\n  selectTodo: (todo: Todo) => void,\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({\n  todos, selectedId, selectTodoId, selectTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id, title, completed,\n          } = todo;\n\n          const isSelected = id === selectedId;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={isSelected ? 'has-background-info-light' : ''}\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={`has-text-${completed ? 'success' : 'danger'}`}>\n                  {title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    selectTodoId(id);\n                    selectTodo(todo);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className={`far fa-eye${isSelected ? '-slash' : ''}`} />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { ChangeEvent, useState } from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface TodoFilterProps {\n  filterTodos: (newTodos: Todo[]) => void;\n  todos: Todo[],\n}\n\nexport const TodoFilter = ({ filterTodos, todos }: TodoFilterProps) => {\n  const [selectedFilter, setSelectedFilter] = useState('all');\n  const [query, setQuery] = useState('');\n\n  const filteredTodos = (filter: string, newQuery: string) => {\n    return todos.filter(todo => {\n      const lowerQuery = newQuery.toLowerCase();\n      const hasTitle = todo.title.toLowerCase().includes(lowerQuery);\n\n      if (!hasTitle) {\n        return false;\n      }\n\n      switch (filter) {\n        case 'all':\n          return true;\n        case 'active':\n          return !todo.completed;\n        case 'completed':\n          return todo.completed;\n        default:\n          throw new Error('wrong filter selected');\n      }\n    });\n  };\n\n  const reset = () => {\n    setQuery('');\n    filterTodos(filteredTodos(selectedFilter, ''));\n  };\n\n  const handleSelectedFilter = (event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedFilter(String(event.target.value));\n    filterTodos(filteredTodos(String(event.target.value), query));\n  };\n\n  const handleFilter = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(String(event.target.value));\n    filterTodos(filteredTodos(selectedFilter, String(event.target.value)));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedFilter}\n            onChange={handleSelectedFilter}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => handleFilter(event)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query !== '' && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => reset()}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ninterface TodoModalProps {\n  selectedUser: User | undefined,\n  selectedTodo: Todo | undefined,\n  reset: () => void;\n  isSelectedLoading: boolean,\n}\n\nexport const TodoModal = ({\n  selectedUser, selectedTodo, reset, isSelectedLoading,\n}:TodoModalProps) => {\n  // const [selectedUser, setSelectedUser] = useState<User>();\n  // const [selectedTodo, setSelectedTodo] = useState<Todo>();\n\n  // useEffect(() => {\n  //   setSelectedTodo(todos.find(todo => todo.id === selectedId));\n  //   getUser(selectedTodo.userId).then(setSelectedUser);\n  //     // eslint-disable-next-line no-console\n  //     console.log('user', selectedUser);\n  // }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isSelectedLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${selectedTodo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => reset()}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {selectedTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong className={`has-text-${selectedTodo?.completed ? 'success' : 'danger'}`}>\n                  {selectedTodo?.completed ? 'Done' : 'Planned'}\n                </strong>\n\n                {' by '}\n\n                <a href={`mailto:${selectedUser?.email}`}>\n                  {selectedUser?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos, getUser } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { User } from './types/User';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n  const [selectedId, setSelectedId] = useState(0);\n  const [selectedUser, setSelectedUser] = useState<User>();\n  const [selectedTodo, setSelectedTodo] = useState<Todo>();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSelectedLoading, setIsSelectedLoading] = useState(true);\n\n  useEffect(() => {\n    getTodos().then(setTodos);\n    getTodos().then(setFilteredTodos).finally(() => setIsLoading(false));\n  }, []);\n\n  const filterTodos = (newTodos: Todo[]) => {\n    setFilteredTodos(newTodos);\n  };\n\n  const selectTodoId = (todoId: number) => {\n    setSelectedId(todoId);\n  };\n\n  const selectUser = (userId: number) => {\n    setIsSelectedLoading(true);\n    getUser(userId).then(setSelectedUser).finally(() => setIsSelectedLoading(false));\n  };\n\n  const selectTodo = (todo: Todo) => {\n    setSelectedTodo(todo);\n    selectUser(todo.userId);\n  };\n\n  const reset = () => {\n    setSelectedId(0);\n    setSelectedTodo(undefined);\n    setSelectedUser(undefined);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterTodos={filterTodos}\n                todos={todos}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? <Loader /> : (\n                <TodoList todos={filteredTodos} selectedId={selectedId} selectTodoId={selectTodoId} selectTodo={selectTodo} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedId && (\n        <TodoModal selectedUser={selectedUser} selectedTodo={selectedTodo} reset={reset} isSelectedLoading={isSelectedLoading} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}